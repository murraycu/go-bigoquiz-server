<?xml version="1.0" encoding="UTF-8"?>
<quiz xmlns="https://bigoquiz.com/document" format_version="1" id="designpatterns">
    <title>Design Patterns</title>

    <section id="core-definitions" answers_as_choices="true" and_reverse="true">
        <title>Core Definitions</title>
        <question id="definition-decorator">
            <text>Decorator</text>
            <link>https://en.wikipedia.org/wiki/Decorator_pattern</link>
            <answer>Wraps an object to provide new behavior.</answer>
        </question>

        <question id="definition-state">
            <text>State</text>
            <link>https://en.wikipedia.org/wiki/State_pattern</link>
            <answer>Encapsulates state-based behaviors and uses delegation to switch between behaviors.</answer>
        </question>

        <question id="definition-iterator">
            <text>Iterator</text>
            <link>https://en.wikipedia.org/wiki/Iterator_pattern</link>
            <answer>Lets you traverse a collection of objects without exposing its implementation.</answer>
        </question>

        <question id="definition-facade">
            <text>Facade</text>
            <link>https://en.wikipedia.org/wiki/Facade_pattern</link>
            <answer>Simplifies the interface of a set of classes.</answer>
        </question>

        <question id="definition-strategy">
            <text>Strategy</text>
            <link>https://en.wikipedia.org/wiki/Strategy_pattern</link>
            <answer>Encapsulates interchangeable behaviors and uses delegation to decide which one to use.</answer>
        </question>

        <question id="definition-strategy">
            <text>Proxy</text>
            <link>https://en.wikipedia.org/wiki/Proxy_pattern</link>
            <answer>Wraps an object to control access to it.</answer>
        </question>

        <question id="definition-factory-method">
            <text>Factory Method</text>
            <link>https://en.wikipedia.org/wiki/Factory_method_pattern</link>
            <answer>Subclasses decide which concrete classes to create.</answer>
        </question>

        <question id="definition-adapter">
            <text>Adapter</text>
            <link>https://en.wikipedia.org/wiki/Adapter_pattern</link>
            <answer>Wraps an object and provides a different interface to it.</answer>
        </question>

        <question id="definition-observer">
            <text>Observer</text>
            <link>https://en.wikipedia.org/wiki/Observer_pattern</link>
            <answer>Allows objects to be notified when state changes.</answer>
        </question>

        <question id="definition-template-method">
            <text>Template Method</text>
            <link>https://en.wikipedia.org/wiki/Template_method_pattern</link>
            <answer>Subclasses decide how to implement steps in an algorithm.</answer>
        </question>

        <question id="definition-composite">
            <text>Composite</text>
            <link>https://en.wikipedia.org/wiki/Composite_pattern</link>
            <answer>Clients treat collections of objects and individual objects uniformly.</answer>
        </question>

        <question id="definition-singleton">
            <text>Singleton</text>
            <link>https://en.wikipedia.org/wiki/Singleton_pattern</link>
            <answer>Ensures one and only one object is created.</answer>
        </question>

        <question id="definition-abstract-factory">
            <text>Abstract Factory</text>
            <link>https://en.wikipedia.org/wiki/Abstract_factory_pattern</link>
            <answer>Allows a client to create families of objects without specifying their concrete classes.</answer>
        </question>

        <question id="definition-command">
            <text>Command</text>
            <link>https://en.wikipedia.org/wiki/Command_pattern</link>
            <answer>Encapsulates a request as an object.</answer>
        </question>
    </section>

    <section id="extra-definitions" answers_as_choices="true" and_reverse="true">
        <title>Extra Definitions</title>
        <question id="definition-bridge">
            <text>Bridge</text>
            <link>https://en.wikipedia.org/wiki/Bridge_pattern</link>
            <answer>Decouples an abstraction from its implementation so they can vary independently.</answer>
        </question>

        <question id="definition-builder">
            <text>Builder</text>
            <link>https://en.wikipedia.org/wiki/Builder_pattern</link>
            <answer>Allows constructing in steps.</answer>
        </question>

        <question id="definition-chain-of-responsibility">
            <text>Chain of Responsibility</text>
            <link>https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern</link>
            <answer>Gives more than one object a chance to handle a request.</answer>
        </question>

        <question id="definition-flyweight">
            <text>Flyweight</text>
            <link>https://en.wikipedia.org/wiki/Flyweight_pattern</link>
            <answer>Use one instance of a class to provide many virtual instances.</answer>
        </question>

        <question id="definition-interpreter">
            <text>Interpreter</text>
            <link>https://en.wikipedia.org/wiki/Interpreter_pattern</link>
            <answer>Evaluates sentences in a language.</answer>
        </question>

        <question id="definition-mediator">
            <text>Mediator</text>
            <link>https://en.wikipedia.org/wiki/Mediator_pattern</link>
            <answer>Encapsulates how a set of objects interact.</answer>
        </question>

        <question id="definition-memento">
            <text>Memento</text>
            <link>https://en.wikipedia.org/wiki/Memento_pattern</link>
            <answer>Provides the ability to restore an object to its previous state.</answer>
        </question>

        <question id="definition-prototype">
            <text>Prototype</text>
            <link>https://en.wikipedia.org/wiki/Prototype_pattern</link>
            <answer>Create objects from prototypical existing instances.</answer>
        </question>

        <question id="definition-visitor">
            <text>Visitor</text>
            <link>https://en.wikipedia.org/wiki/Visitor_pattern</link>
            <answer>Allows the definition of new operations on objects without changing their structures.</answer>
        </question>
    </section>
</quiz>