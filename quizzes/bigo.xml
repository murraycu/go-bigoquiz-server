<?xml version="1.0" encoding="UTF-8"?>
<quiz xmlns="https://bigoquiz.com/document" format_version="1" id="bigo">
    <title>Big-O of Algorithms and Data Structures</title>
    <section id="data-structure-operations" answers_as_choices="true">
        <title>Data Structure Operations</title>
        <subsection id="array-unsorted">
            <title>Array (unsorted)</title>
            <link>http://en.wikipedia.org/wiki/Array_data_structure</link>
            <question id="array-unsorted-access-average">
                <text>Access (Average)</text>
                <answer>O(1)</answer>
            </question>
            <question id="array-unsorted-search-average">
                <text>Search (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="array-unsorted-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="array-unsorted-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(n)</answer>
            </question>

            <question id="array-unsorted-access-worst">
                <text>Access (Worst)</text>
                <answer>O(1)</answer>
            </question>
            <question id="array-unsorted-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="array-unsorted-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="array-unsorted-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(n)</answer>
            </question>

            <question id="array-unsorted-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="array">
            <title>Array (sorted)</title>
            <link>http://en.wikipedia.org/wiki/Array_data_structure</link>
            <question id="array-sorted-access-average">
                <text>Access (Average)</text>
                <answer>O(1)</answer>
            </question>
            <question id="array-sorted-search-average">
                <text>(Binary) Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="array-sorted-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="array-sorted-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(n)</answer>
            </question>

            <question id="array-sorted-access-worst">
                <text>Access (Worst)</text>
                <answer>O(1)</answer>
            </question>
            <question id="array-sorted-search-worst">
                <text>(Binary) Search (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="array-sorted-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="array-sorted-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(n)</answer>
            </question>

            <question id="array-sorted-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <!-- bigocheatsheet.com has stack, but bigoref.com does not. -->
        <subsection id="stack">
            <title>Stack</title>
            <link>http://en.wikipedia.org/wiki/Stack_(abstract_data_type)</link>
            <question id="stack-access-average">
                <text>Access (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="stack-search-average">
                <text>Search (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="stack-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(1)</answer>
            </question>
            <question id="stack-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(1)</answer>
            </question>

            <question id="stack-access-worst">
                <text>Access (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="stack-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="stack-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(1)</answer>
            </question>
            <question id="stack-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(1)</answer>
            </question>

            <question id="stack-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="singly-linked-list">
            <title>Singly-Linked List</title>
            <link>http://en.wikipedia.org/wiki/Singly_linked_list#Singly_linked_lists</link>
            <question id="singly-linked-list-access-average">
                <text>Access (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="singly-linked-list-search-average">
                <text>Search (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="singly-linked-list-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(1)</answer>
            </question>
            <question id="singly-linked-list-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(1)</answer>
            </question>

            <question id="singly-linked-list-access-worst">
                <text>Access (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="singly-linked-list-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="singly-linked-list-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(1)</answer>
            </question>
            <question id="singly-linked-list-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(1)</answer>
            </question>

            <question id="singly-linked-list-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="doubly-linked-list">
            <title>Doubly-Linked List</title>
            <link>http://en.wikipedia.org/wiki/Doubly_linked_list</link>
            <question id="doubly-linked-list-access-average">
                <text>Access (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="doubly-linked-list-search-average">
                <text>Search (Average)</text>
                <answer>O(n)</answer>
            </question>
            <question id="doubly-linked-list-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(1)</answer>
            </question>
            <question id="doubly-linked-list-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(1)</answer>
            </question>

            <question id="doubly-linked-list-access-worst">
                <text>Access (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="doubly-linked-list-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="doubly-linked-list-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(1)</answer>
            </question>
            <question id="doubly-linked-list-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(1)</answer>
            </question>

            <question id="doubly-linked-list-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="skip-list">
            <title>Skip List</title>
            <link>http://en.wikipedia.org/wiki/Skip_list</link>
            <question id="skip-list-access-average">
                <text>Access (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="skip-list-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="skip-list-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="skip-list-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="skip-list-access-worst">
                <text>Access (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="skip-list-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="skip-list-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="skip-list-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(n)</answer>
            </question>

            <question id="skip-list-space">
                <text>Space Complexity</text>
                <answer>O(n log(n))</answer>
            </question>
        </subsection>

        <subsection id="hash-table">
            <title>Hash Table</title>
            <link>http://en.wikipedia.org/wiki/Hash_table</link>
            <!-- No hash-table-search-access-average -->
            <question id="hash-table-search-average">
                <text>Search (Average)</text>
                <answer>O(1)</answer>
            </question>
            <question id="hash-table-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(1)</answer>
            </question>
            <question id="hash-table-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(1)</answer>
            </question>

            <!-- No hash-table-search-access-worst -->
            <question id="hash-table-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="hash-table-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="hash-table-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(n)</answer>
            </question>

            <question id="hash-table-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="binary-search-tree">
            <title>Binary Search Tree</title>
            <link>http://en.wikipedia.org/wiki/Binary_search_tree</link>
            <question id="binary-search-tree-access-average">
                <text>Access (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binary-search-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binary-search-tree-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binary-search-tree-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="binary-search-tree-access-worst">
                <text>Access (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="binary-search-tree-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="binary-search-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="binary-search-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(n)</answer>
            </question>

            <question id="binary-search-tree-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="cartesian-tree">
            <title>Cartesian Tree</title>
            <link>https://en.wikipedia.org/wiki/Cartesian_tree</link>
            <!-- No cartesian-tree-search-access-average -->
            <question id="cartesian-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="cartesian-tree-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="cartesian-tree-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <!-- No cartesian-tree-search-access-worst -->
            <question id="cartesian-tree-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="cartesian-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="cartesian-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(n)</answer>
            </question>

            <question id="cartesian-tree-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="ternary-search-tree">
            <title>Ternary Search Tree</title>
            <link>https://en.wikipedia.org/wiki/B_tree</link>
            <!-- No ternary-search-tree-access-average -->
            <question id="ternary-search-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="ternary-search-tree-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="ternary-search-tree-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <!-- No ternary-search-tree-access-worst -->
            <question id="ternary-search-tree-search-worst">
                <text>Search (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="ternary-search-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(n)</answer>
            </question>
            <question id="ternary-search-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(n)</answer>
            </question>

            <question id="ternary-search-tree-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="b-tree">
            <title>B-Tree</title>
            <link>https://en.wikipedia.org/wiki/B_tree</link>
            <question id="b-tree-access-average">
                <text>Access (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="b-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="b-tree-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="b-tree-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="b-tree-access-worst">
                <text>Access (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="b-tree-search-worst">
                <text>Search (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="b-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="b-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="b-tree-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="red-black-tree">
            <title>Red Black Tree</title>
            <link>https://en.wikipedia.org/wiki/Red-black_tree</link>
            <question id="red-black-tree-access-average">
                <text>Access (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="red-black-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="red-black-tree-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="red-black-tree-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="red-black-tree-access-worst">
                <text>Access (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="red-black-tree-search-worst">
                <text>Search (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="red-black-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="red-black-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="red-black-tree-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="splay-tree">
            <title>Splay Tree</title>
            <link>https://en.wikipedia.org/wiki/Splay_tree</link>
            <!-- No splay-tree-search-access-average -->
            <question id="splay-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="splay-tree-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="splay-tree-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <!-- No splay-tree-search-access-worst -->
            <question id="splay-tree-search-worst">
                <text>Search (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="splay-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="splay-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="splay-tree-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="avl-tree">
            <title>AVL Tree</title>
            <link>https://en.wikipedia.org/wiki/AVL_tree</link>
            <question id="avl-tree-access-average">
                <text>Access (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="avl-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="avl-tree-insertion-average">
                <text>Insertion (Average)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="avl-tree-deletion-average">
                <text>Deletion (Average)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="avl-tree-access-worst">
                <text>Access (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="avl-tree-search-worst">
                <text>Search (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="avl-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="avl-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <answer>O(log(n))</answer>
            </question>

            <question id="avl-tree-space">
                <text>Space Complexity</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <!-- This is not in bigoref.com, or in bigocheatsheet.com:
        See https://github.com/josem/bigoref/issues/6 -->
        <subsection id="trie">
            <title>Trie (Prefix Tree)</title>
            <link>https://en.wikipedia.org/wiki/Trie</link>
            <!-- No trie-access-average -->
            <question id="trie-search-average">
                <text>Search (Average)</text>
                <answer>O(m)</answer>
            </question>
            <question id="trie-insertion-average">
                <text>Insertion (Average)</text>
                <!-- TODO: Not sure: https://stackoverflow.com/questions/17891442/what-is-the-best-worst-average-case-big-o-runtime-of-a-trie-data-structure -->
                <answer>O(m)</answer></question>
            <question id="trie-deletion-average">
                <text>Deletion (Average)</text>
                <!-- TODO: Not sure: https://stackoverflow.com/questions/17891442/what-is-the-best-worst-average-case-big-o-runtime-of-a-trie-data-structure -->
                <answer>O(m)</answer>
            </question>

            <!-- No trie-access-worst -->
            <question id="trie-search-worst">
                <text>Search (Worst)</text>
                <!-- TODO: Not sure: https://stackoverflow.com/questions/17891442/what-is-the-best-worst-average-case-big-o-runtime-of-a-trie-data-structure -->
                <answer>O(m)</answer>
            </question>
            <question id="trie-insertion-worst">
                <text>Insertion (Worst)</text>
                <!-- TODO: Not sure: https://stackoverflow.com/questions/17891442/what-is-the-best-worst-average-case-big-o-runtime-of-a-trie-data-structure -->
                <answer>O(m)</answer>
            </question>
            <question id="trie-deletion-worst">
                <text>Deletion (Worst)</text>
                <!-- TODO: Not sure: https://stackoverflow.com/questions/17891442/what-is-the-best-worst-average-case-big-o-runtime-of-a-trie-data-structure -->
                <answer>O(m)</answer>
            </question>

            <question id="trie-space">
                <text>Space Complexity</text>
                <answer>O(mn)</answer>
            </question>
        </subsection>

        <!-- This is not in bigoref.com, or in bigocheatsheet.com:
        See https://github.com/josem/bigoref/issues/6 -->
        <subsection id="suffix-tree">
            <title>Suffix Tree (Compressed Trie)</title>
            <link>https://en.wikipedia.org/wiki/Suffix_tree</link>
            <!-- No suffix-tree-access-average -->
            <question id="suffix-tree-search-average">
                <text>Search (Average)</text>
                <answer>O(m)</answer>
            </question>
            <question id="suffix-tree-insertion-average">
                <text>Insertion (Average)</text>
                <!-- TODO: Not sure. -->
                <answer>O(m)</answer></question>
            <question id="suffix-tree-deletion-average">
                <text>Deletion (Average)</text>
                <!-- TODO: Not sure. -->
                <answer>O(m)</answer>
            </question>

            <!-- No suffix-tree-access-worst -->
            <question id="suffix-tree-search-worst">
                <text>Search (Worst)</text>
                <!-- TODO: Not sure. -->
                <answer>O(m)</answer>
            </question>
            <question id="suffix-tree-insertion-worst">
                <text>Insertion (Worst)</text>
                <!-- TODO: Not sure. -->
                <answer>O(m)</answer>
            </question>
            <question id="suffix-tree-deletion-worst">
                <text>Deletion (Worst)</text>
                <!-- TODO: Not sure. -->
                <answer>O(m)</answer>
            </question>

            <question id="suffix-tree-space">
                <text>Space Complexity</text>
                <answer>O(mn)</answer>
            </question>
        </subsection>

    </section>

    <section id="array-sorting-algorithms" answers_as_choices="true">
        <title>Array Sorting Algorithms</title>
        <subsection id="quicksort">
            <title>Quicksort</title>
            <link>https://en.wikipedia.org/wiki/Quicksort</link>
            <question id="quicksort-time-best">
                <text>Time (Best)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="quicksort-time-average">
                <text>Time (Average)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="quicksort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="quicksort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(log(n))</answer>
            </question>
        </subsection>

        <subsection id="mergesort">
            <title>Mergesort</title>
            <link>https://en.wikipedia.org/wiki/Merge_sort</link>
            <question id="mergesort-time-best">
                <text>Time (Best)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="mergesort-time-average">
                <text>Time (Average)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="mergesort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="mergesort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="timsort">
            <title>Timsort</title>
            <link>https://en.wikipedia.org/wiki/Timsort</link>
            <question id="timsort-time-best">
                <text>Time (Best)</text>
                <answer>O(n)</answer>
            </question>
            <question id="timsort-time-average">
                <text>Time (Average)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="timsort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="timsort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(n)</answer>
            </question>
        </subsection>

        <subsection id="heapsort">
            <title>Heapsort</title>
            <link>https://en.wikipedia.org/wiki/Heapsort</link>
            <question id="heapsort-time-best">
                <text>Time (Best)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="heapsort-time-average">
                <text>Time (Average)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="heapsort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n log(n))</answer>
            </question>
            <question id="heapsort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(1)</answer>
            </question>
        </subsection>

        <subsection id="bubble-sort">
            <title>Bubble Sort</title>
            <link>https://en.wikipedia.org/wiki/Bubble_sort</link>
            <question id="bubble-sort-time-best">
                <text>Time (Best)</text>
                <answer>O(n)</answer>
            </question>
            <question id="bubble-sort-time-average">
                <text>Time (Average)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="bubble-sort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="bubble-sort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(1)</answer>
            </question>
        </subsection>

        <subsection id="insertion-sort">
            <title>Insertion Sort</title>
            <link>https://en.wikipedia.org/wiki/Insertion_sort</link>
            <question id="insertion-sort-time-best">
                <text>Time (Best)</text>
                <answer>O(n)</answer>
            </question>
            <question id="insertion-sort-time-average">
                <text>Time (Average)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="insertion-sort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="insertion-sort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(1)</answer>
            </question>
        </subsection>

        <subsection id="selection-sort">
            <title>Selection Sort</title>
            <link>https://en.wikipedia.org/wiki/Selection_sort</link>
            <question id="selection-sort-time-best">
                <text>Time (Best)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="selection-sort-time-average">
                <text>Time (Average)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="selection-sort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="selection-sort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(1)</answer>
            </question>
        </subsection>

        <subsection id="shell-sort">
            <title>Shell Sort</title>
            <link>https://en.wikipedia.org/wiki/Shellsort</link>
            <!-- This is apparently wrong on bigoref.com:  https://github.com/josem/bigoref/issues/3 -->
            <question id="shell-sort-sort-time-best">
                <text>Time (Best)</text>
                <answer>O(n)</answer>
            </question>
            <!-- No "shell-sort-sort-time-average" because it's an unsolved problem
                 according to wikipedia. -->
            <!-- This is apparently wrong in bigocheatsheet.com: https://github.com/ericdrowell/BigOCheatSheet/pull/83 -->
            <question id="shell-sort-sort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="shell-sort-sort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(1)</answer>
            </question>
        </subsection>

        <subsection id="bucket-sort">
            <title>Bucket Sort</title>
            <link>https://en.wikipedia.org/wiki/Bucket_sort</link>
            <question id="bucket-sort-sort-time-best">
                <text>Time (Best)</text>
                <answer>O(n + k)</answer>
            </question>
            <question id="bucket-sort-sort-time-average">
                <text>Time (Average)</text>
                <answer>O(n + k)</answer>
            </question>
            <question id="bucket-sort-sort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(n²)</answer>
            </question>
            <question id="bucket-sort-sort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(nk)</answer>
            </question>
        </subsection>

        <!-- Note: Sedgewick's Algorithms text book (section 5.1) calls this string sort,
        but everyone else seems to call it radix sort. -->
        <subsection id="radix-sort">
            <title>Radix Sort (LSD or MSD String Sort)</title>
            <link>https://en.wikipedia.org/wiki/Radix_sort</link>
            <question id="radix-sort-sort-time-best">
                <text>Time (Best)</text>
                <answer>O(nk)</answer>
            </question>
            <question id="radix-sort-sort-time-average">
                <text>Time (Average)</text>
                <answer>O(nk)</answer>
            </question>
            <question id="radix-sort-sort-time-worst">
                <text>Time (Worst)</text>
                <answer>O(nk)</answer>
            </question>
            <question id="radix-sort-sort-space-worst">
                <text>Space (Worst)</text>
                <answer>O(n + k)</answer>
            </question>
        </subsection>
    </section>

    <section id="graph-operations" answers_as_choices="true">
        <title>Graph Operations</title>
        <subsection id="adjacency-list">
            <title>Adjacency List</title>
            <link>https://en.wikipedia.org/wiki/Adjacency_list</link>
            <question id="adjacency-list-storage">
                <text>Storage</text>
                <answer>O(|V| + |E|)</answer>
            </question>
            <question id="adjacency-list-add-vertex">
                <text>Add Vertex</text>
                <answer>O(1)</answer>
            </question>
            <question id="adjacency-list-add-edge">
                <text>Add Edge</text>
                <answer>O(1)</answer>
            </question>
            <question id="adjacency-list-remove-vertex">
                <text>Remove Vertex</text>
                <answer>O(|V| + |E|)</answer>
            </question>
            <question id="adjacency-list-remove-edge">
                <text>Remove Edge</text>
                <answer>O(|E|)</answer>
            </question>
            <question id="adjacency-list-query">
                <text>Query</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>

        <subsection id="incidence-list">
            <title>Incidence List</title>
            <link>https://en.wikipedia.org/wiki/Incidence_list</link>
            <question id="incidence-list-storage">
                <text>Storage</text>
                <answer>O(|V| + |E|)</answer>
            </question>
            <question id="incidence-list-add-vertex">
                <text>Add Vertex</text>
                <answer>O(1)</answer>
            </question>
            <question id="incidence-list-add-edge">
                <text>Add Edge</text>
                <answer>O(1)</answer>
            </question>
            <question id="incidence-list-remove-vertex">
                <text>Remove Vertex</text>
                <answer>O(|E|)</answer>
            </question>
            <question id="incidence-list-remove-edge">
                <text>Remove Edge</text>
                <answer>O(|E|)</answer>
            </question>
            <question id="incidence-list-query">
                <text>Query</text>
                <answer>O(|E|)</answer>
            </question>
        </subsection>

        <subsection id="adjacency-matrix">
            <title>Adjacency Matrix</title>
            <link>https://en.wikipedia.org/wiki/Adjacency_matrix</link>
            <question id="adjacency-matrix-storage">
                <text>Storage</text>
                <answer>O(|V|²)</answer>
            </question>
            <question id="adjacency-matrix-add-vertex">
                <text>Add Vertex</text>
                <answer>O(|V|²)</answer>
            </question>
            <question id="adjacency-matrix-add-edge">
                <text>Add Edge</text>
                <answer>O(1)</answer>
            </question>
            <question id="adjacency-matrix-remove-vertex">
                <text>Remove Vertex</text>
                <answer>O(|V|²)</answer>
            </question>
            <question id="adjacency-matrix-remove-edge">
                <text>Remove Edge</text>
                <answer>O(1)</answer>
            </question>
            <question id="adjacency-matrix-query">
                <text>Query</text>
                <answer>O(1)</answer>
            </question>
        </subsection>

        <subsection id="incidence-matrix">
            <title>Incidence Matrix</title>
            <link>https://en.wikipedia.org/wiki/Incidence_matrix</link>
            <question id="incidence-matrix-storage">
                <text>Storage</text>
                <answer>O(|V| ⋅ |E|)</answer>
            </question>
            <question id="incidence-matrix-add-vertex">
                <text>Add Vertex</text>
                <answer>O(|V| ⋅ |E|)</answer>
            </question>
            <question id="incidence-matrix-add-edge">
                <text>Add Edge</text>
                <answer>O(|V| ⋅ |E|)</answer>
            </question>
            <question id="incidence-matrix-remove-vertex">
                <text>Remove Vertex</text>
                <answer>O(|V| ⋅ |E|)</answer>
            </question>
            <question id="incidence-matrix-remove-edge">
                <text>Remove Edge</text>
                <answer>O(|V| ⋅ |E|)</answer>
            </question>
            <question id="incidence-matrix-query">
                <text>Query</text>
                <answer>O(|E|)</answer>
            </question>
        </subsection>
    </section>

    <!-- This is not in bigocheatsheet.com.
    This is in bigoref.com in a searching section, along with array and binary search.
    bigoref.com has both average and worst time, but they are the same for all algorithms,
     so we only have time here. -->
    <section id="graph-search" answers_as_choices="true">
        <title>Graph Search</title>
        <subsection id="depth-first-search">
            <title>Depth First Search (DFS)</title>
            <link>https://en.wikipedia.org/wiki/Depth-first_search</link>
            <question id="depth-first-search-time">
                <text>Time</text>
                <answer>O(|V| + |E|)</answer>
            </question>
            <question id="depth-first-search-space">
                <text>Space (Worst)</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>

        <subsection id="breadth-first-search">
            <title>Breadth First Search (BFS)</title>
            <link>https://en.wikipedia.org/wiki/Breadth-first_search</link>
            <question id="breadth-first-search-time">
                <text>Time</text>
                <answer>O(|V| + |E|)</answer>
            </question>
            <question id="breadth-first-search-space">
                <text>Space (Worst)</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>


        <!-- This is not mentioned on bigocheatsheet or bigoref:
             https://github.com/josem/bigoref/issues/9

             This is mentioned in Sedgewick's Algorithms book (4th edition) on page 658.
             And in CLRS as section 24.2.
        -->
        <subsection id="topological-sort-sp">
            <title>Topological sort based algorithm for shortest path on DAG (weighted, but without cycles)</title>
            <link>https://en.wikipedia.org/wiki/Topological_sorting#Application_to_shortest_path_finding</link>
            <question id="topological-sort-sp-time">
                <text>Time</text>
                <answer>O((|V|+|E|)</answer>
            </question>
            <question id="topological-sort-sp-space">
                <text>Space (Worst)</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>

        <subsection id="dijkstra-with-unsorted-array">
            <title>Dijkstra's Algorithm for Shortest Path (Unsorted array as priority queue)</title>
            <link>https://en.wikipedia.org/wiki/Dijkstra's_algorithm</link>
            <question id="dijkstra-with-unsorted-array-time">
                <text>Time</text>
                <answer>O(|V|²)</answer>
            </question>
            <question id="dijkstra-with-unsorted-array-space">
                <text>Space (Worst)</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>

        <subsection id="dijkstra-with-min-heap">
        <title>Dijkstra's Algorithm for Shortest Path (Min-heap as priority queue)</title>
            <link>https://en.wikipedia.org/wiki/Dijkstra's_algorithm</link>
            <question id="dijkstra-with-min-heap-time">
                <text>Time</text>
                <answer>O((|V|+|E|) log(|V|))</answer>
            </question>
            <question id="dijkstra-with-min-heap-space">
                <text>Space (Worst)</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>

        <subsection id="dijkstra-with-fibonacci-heap">
            <title>Dijkstra's Algorithm for Shortest Path (Fibonacci heap as priority queue)</title>
            <link>https://en.wikipedia.org/wiki/Dijkstra's_algorithm</link>
            <question id="dijkstra-with-fibonacci-time">
                <text>Time</text>
                <answer>O(|E| + |V| log(|V|))</answer>
            </question>
            <question id="dijkstra-with-fibonacci-space">
                <text>Space (Worst)</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>

        <subsection id="bellman-ford">
            <title>Bellman-Ford algorithm for Shortest Path</title>
            <link>https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm</link>
            <question id="bellman-ford-time">
                <text>Time</text>
                <answer>O(|V| ⋅ |E|)</answer>
            </question>
            <question id="bellman-ford-space">
                <text>Space (Worst)</text>
                <answer>O(|V|)</answer>
            </question>
        </subsection>

        <!-- These are not in bigocheatsheet.com or bigoref.com.
        See https://github.com/ericdrowell/BigOCheatSheet/issues/84 -->
        <subsection id="kruskal-mst">
            <title>Kruskal's Minimum Spanning Tree</title>
            <link>https://en.wikipedia.org/wiki/Kruskal's_algorithm</link>
            <question id="kruskal-mst-time">
                <text>Time</text>
                <answer>O(|E| log(|E|))</answer>
            </question>
        </subsection>
        <subsection id="prims-mst">
            <title>Prim's Minimum Spanning Tree</title>
            <link>https://en.wikipedia.org/wiki/Prim's_algorithm</link>
            <question id="prims-mst-time">
                <text>Time</text>
                <answer>O(|E| log(|V|))</answer>
                <note>When using a binary heap (priority queue). Or O(|E| + |V| log(|V|)) with a fibonacci heap (Fredman-Tarjan).</note>
            </question>
        </subsection>
        <subsection id="floyd-warshall-apsp">
            <title>Floyd–Warshall All Pairs Shortest Path</title>
            <link>https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm</link>
            <question id="floyd-warshall-apsp-time">
                <text>Time</text>
                <answer>O(|V|³)</answer>
            </question>
            <question id="floyd-warshall-apsp-space">
                <text>Space (Worst)</text>
                <answer>O(|V|²)</answer>
            </question>
        </subsection>

        <subsection id="johnson-apsp">
            <title>Johnson's All Pairs Shortest Path</title>
            <link>https://en.wikipedia.org/wiki/Johnson's_algorithm</link>
            <question id="johnson-apsp-time">
                <text>Time</text>
                <!-- TODO: Wikipedia has this a little different: https://en.wikipedia.org/wiki/Johnson's_algorithm#Analysis -->
                <answer>O(|E| ⋅ |V| log(|V|))</answer>
            </question>

        </subsection>

        <subsection id="edmonds-karp-max-flow">
            <title>Edmonds-Karp (Ford-Fulkerson) Max Flow</title>
            <link>https://en.wikipedia.org/wiki/Edmonds%E2%80%93Karp_algorithm</link>
            <question id="edmonds-karp-max_flow-time">
                <text>Time</text>
                <answer>O(V ⋅ |E|²)</answer>
            </question>
            <!-- TODO:
            <question id="edmonds-karp-max_flow-space">
                <text>Space (Worst)</text>
                <answer>O(n)</answer>
            </question>
            -->
        </subsection>

        <subsection id="push-relabel-max-flow">
            <title>Push-Relabel Max Flow</title>
            <link>https://en.wikipedia.org/wiki/Push%E2%80%93relabel_maximum_flow_algorithm</link>
            <question id="push-relabel-max_flow-time">
                <text>Time</text>
                <answer>O(|V|² ⋅ E)</answer>
            </question>
            <!-- TODO:
            <question id="push-relabel-max_flow-space">
                <text>Space (Worst)</text>
                <answer>O(n)</answer>
            </question>
            -->
        </subsection>
    </section>

    <section id="heap-operations" answers_as_choices="true">
        <title>Heap Operations</title>
        <subsection id="linked-list-sorted">
            <title>Linked List (sorted)</title>
            <link>https://en.wikipedia.org/wiki/Linked_list</link>
            <!-- No linked-list-sorted-heapify -->
            <question id="linked-list-sorted-find-max">
                <text>Find Max</text>
                <answer>O(1)</answer>
            </question>
            <question id="linked-list-sorted-extract-max">
                <text>Extract Max</text>
                <answer>O(1)</answer>
            </question>
            <question id="linked-list-sorted-increase-key">
                <text>Increase Key</text>
                <answer>O(n)</answer>
            </question>
            <question id="linked-list-sorted-insert">
                <text>Insert</text>
                <answer>O(n)</answer>
            </question>
            <question id="linked-list-sorted-delete">
                <text>Delete</text>
                <answer>O(1)</answer>
            </question>
            <question id="linked-list-sorted-merge">
                <text>Merge</text>
                <answer>O(m + n)</answer>
            </question>
        </subsection>

        <subsection id="linked-list-unsorted">
            <title>Linked List (unsorted)</title>
            <link>https://en.wikipedia.org/wiki/Linked_list</link>
            <!-- No linked-list-unsorted-heapify -->
            <question id="linked-list-unsorted-find-max">
                <text>Find Max</text>
                <answer>O(n)</answer>
            </question>
            <question id="linked-list-unsorted-extract-max">
                <text>Extract Max</text>
                <answer>O(n)</answer>
            </question>
            <question id="linked-list-unsorted-increase-key">
                <text>Increase Key</text>
                <answer>O(1)</answer>
            </question>
            <question id="linked-list-unsorted-insert">
                <text>Insert</text>
                <answer>O(1)</answer>
            </question>
            <question id="linked-list-unsorted-delete">
                <text>Delete</text>
                <answer>O(1)</answer>
            </question>
            <question id="linked-list-unsorted-merge">
                <text>Merge</text>
                <answer>O(1)</answer>
            </question>
        </subsection>

        <subsection id="binary-heap">
            <title>Binary Heap</title>
            <link>https://en.wikipedia.org/wiki/Binary_heap</link>
            <question id="binary-heap-heapify">
                <text>Heapify</text>
                <answer>O(n)</answer>
            </question>
            <question id="binary-heap-find-max">
                <text>Find Max</text>
                <answer>O(1)</answer>
            </question>
            <!-- bigoref.com has O(n log(n)): https://github.com/josem/bigoref/issues/5 -->
            <question id="binary-heap-extract-max">
                <text>Extract Max</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binary-heap-increase-key">
                <text>Increase Key</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binary-heap-insert">
                <text>Insert</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binary-heap-delete">
                <text>Delete</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binary-heap-merge">
                <text>Merge</text>
                <answer>O(m + n)</answer>
            </question>
        </subsection>

        <subsection id="binomial-heap">
            <title>Binomial Heap</title>
            <link>https://en.wikipedia.org/wiki/Binomial_heap</link>
            <!-- No binomial-heap-heapify -->
            <!-- bigoref.com has O(n log(n)): https://github.com/josem/bigoref/issues/5 -->
            <question id="binomial-heap-find-max">
                <text>Find Max</text>
                <answer>O(1)</answer>
            </question>
            <!-- bigoref.com has O(n log(n)): https://github.com/josem/bigoref/issues/5 -->
            <question id="binomial-heap-extract-max">
                <text>Extract Max</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binomial-heap-increase-key">
                <text>Increase Key</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binomial-heap-insert">
                <text>Insert</text>
                <answer>O(1)</answer>
            </question>
            <question id="binomial-heap-delete">
                <text>Delete</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="binomial-heap-merge">
                <text>Merge</text>
                <answer>O(log(n))</answer>
            </question>
        </subsection>

        <subsection id="fibonacci-heap">
            <title>Fibonacci Heap</title>
            <link>https://en.wikipedia.org/wiki/Fibonacci_heap</link>
            <!-- No fibonacci-heap-heapify -->
            <question id="fibonacci-heap-find-max">
                <text>Find Max</text>
                <answer>O(1)</answer>
            </question>
            <question id="fibonacci-heap-extract-max">
                <text>Extract Max</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="fibonacci-heap-increase-key">
                <text>Increase Key</text>
                <answer>O(1)</answer>
            </question>
            <question id="fibonacci-heap-insert">
                <text>Insert</text>
                <answer>O(1)</answer>
            </question>
            <question id="fibonacci-heap-delete">
                <text>Delete</text>
                <answer>O(log(n))</answer>
            </question>
            <question id="fibonacci-heap-merge">
                <text>Merge</text>
                <answer>O(1)</answer>
            </question>
        </subsection>
    </section>
</quiz>