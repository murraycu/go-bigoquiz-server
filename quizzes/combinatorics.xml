<?xml version="1.0" encoding="UTF-8"?>
<quiz xmlns="https://bigoquiz.com/document" format_version="1" id="combinatorics">
    <title>Combinatorics</title>

    <section id="definitions" answers_as_choices="true" and_reverse="true">
        <title>Definitions</title>
        <question id="definition-permutation">
            <text>Permutation</text>
            <link>https://en.wikipedia.org/wiki/Permutation</link>
            <answer>Ordered selection</answer>
        </question>

        <question id="definition-combination">
            <text>Combination</text>
            <link>https://en.wikipedia.org/wiki/Combination</link>
            <answer>Unordered selection</answer>
        </question>

        <question id="definition-subsequence">
            <text>Subsequence</text>
            <link>https://en.wikipedia.org/wiki/Combination</link>
            <answer>Elements in sequence but not contiguous.</answer>
        </question>

        <question id="definition-subarray">
            <text>Subarray / Substring</text>
            <link>https://en.wikipedia.org/wiki/Combination</link>
            <answer>Elements in sequence and contiguous.</answer>
        </question>

        <question id="definition-subset">
            <text>Subset</text>
            <link>https://en.wikipedia.org/wiki/Subset</link>
            <answer>Elements must not be in sequence or contiguous.</answer>
            <!-- TODO: Do they really not need to be in sequence/order? -->
        </question>

        <question id="definition-power-set">
            <text>Power Set</text>
            <link>https://en.wikipedia.org/wiki/Power_set</link>
            <answer>All (unordered) subsets, of any size, of n items. Including the empty subset.</answer>
        </question>
    </section>

    <section id="count" answers_as_choices="true" and_reverse="true">
        <title>Counts of Permutations, Combinations and Subsets</title>
        <question id="count-permutations">
            <text>Number of permutations of n items.</text>
            <link>https://en.wikipedia.org/wiki/Permutation</link>
            <answer>n!</answer>
        </question>

        <question id="count-k-permutations">
            <text>Number of ordered subset combinations (permutations) of k items from n items.</text>
            <link>https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n</link>
            <answer>n! / (n - k)!</answer>
        </question>

        <question id="count-subsets">
            <text>Number of ordered subset combinations (permutations) of any size from n items. (The power set.)</text>
            <link>https://en.wikipedia.org/wiki/Power_set#Properties</link>
            <answer>2 ^ n</answer>
            <note>Because for every item, we can choose to include it or not. And for the next item there are 2 more choices.</note>
        </question>
        <note>This is also the number of ways to set only k out of n bits.
            To avoid integer overflow, calculate via the recurrence: n choose k = (n / k) * (n-1 choose k-1), dividing by lower divisors first.</note>

        <question id="count-combinations-n-choose-k">
            <text>Number of unordered subset combinations of k items from n items (n choose k).</text>
            <link>https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n</link>
            <answer>n! / ((n - k)! â‹…  k)</answer>
        </question>
    </section>

    <section id="algorithms" answers_as_choices="true" and_reverse="true">
        <title>Algorithms</title>
        <question id="algorithms-gospers-hack">
            <text>Gosper's Hack for iterating combinations.</text>
            <link>http://read.seas.harvard.edu/cs207/2012/?p=64</link>
            <answer>y = x &amp; -x;  c = x + y; x = (((x ^ c) &gt;&gt; 2) / y) | c;</answer>
        </question>

        <question id="algorithms-next-lexicographical-permutation">
            <text>Next Lexicographical Permutation.</text>
            <link>https://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order</link>
            <answer>Find rightmost a[k] &lt; a[k+1]. Find rightmost a[l] >  a[k] after k, Swap a[k] and a[l]. Reverse from a[k+1].</answer>
        </question>

        <question id="algorithms-generate-all-permutations-recursive">
            <text>Generate all ordered subsets (permutations) of size n from n items.</text>
            <answer>Recursively pass the length of the solution so far. For each possible item, check if it has been used already in the solution, and if not use it and recurse. Use the subset when the index == number of items.  Alternatively, Recursively pass the index of the next possible item. For each item position from the index to the end, swap the position and the index position, and recurse. Use the subset when the index == number of items.</answer>
        </question>

        <question id="algorithms-generate-all-subsets-recursive">
            <text>Generate all possible unordered (combinations) subsets (The power set) recursively.</text>
            <answer>Recursively pass the index of the next possible item, and the prefix of the subset so far. Recurse once without appending the current item, and once with appending the current item. Use the subset when the index == number of possible items.</answer>
        </question>

        <question id="algorithms-generate-all-subsets-iterative">
            <text>Generate all possible unordered (combinations) subsets (The power set) iteratively. For small n.</text>
            <answer>Try all possible integer values from 0 to 2^n. If bit i is set then include item i in the subset.</answer>
            <note>This only works if there are 64 or less items. But 2^64 is very large.</note>
        </question>


    </section>

    <!-- TODO: Number of ways to rearrange letters: N! / product of (number of each letter)! . For instance: aabbbccc: n! / (2! * 3! * 4!) -->

    <!-- TODO: lexicographically-next permutation -->
    <!-- TODO: next n-choose-k combination (subset) -->

    <!-- Iterating over permutations.
      rank/unrank or incremental change. -->
    <!-- Iterating over subsets
      lexicographic, gray code, binary counting
      n choose k: Gosper's hack. -->
</quiz>