<?xml version="1.0" encoding="UTF-8"?>
<quiz xmlns="https://bigoquiz.com/document" format_version="1" id="cpp_std_algorithms">
    <title>C++ Standard Algorithms</title>

    <section id="non-modifying-sequence-operations" answers_as_choices="true" and_reverse="true">
        <title>Non-Modifying Sequence Operations</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Non-modifying_sequence_operations</link>
        <question id="non-modifying-all_of">
            <text>all_of(), any_of(), none_of()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/all_any_none_of</link>
            <answer>Checks if a predicate is true for all, any or none of the elements in a range.</answer>
        </question>

        <question id="non-modifying-for_each">
            <text>for_each()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/for_each</link>
            <answer>Applies a function to a range of elements.</answer>
        </question>

        <question id="non-modifying-for_each_n">
            <text>for_each_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/for_each_n</link>
            <answer>Applies a function object to the first n elements of a sequence.</answer>
        </question>

        <question id="non-modifying-count">
            <text>count(), count_if()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/count</link>
            <answer>Returns the number of elements satisfying specific criteria.</answer>
        </question>

        <question id="non-modifying-mismatch">
            <text>mismatch()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/mismatch</link>
            <answer>Finds the first position where two ranges differ.</answer>
        </question>

        <question id="non-modifying-equal">
            <text>equal()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/equal</link>
            <answer>Determines if two sets of elements are the same.</answer>
        </question>

        <question id="non-modifying-find">
            <text>find(), find_if(), find_if_not()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/find</link>
            <answer>Finds the first element satisfying specific criteria.</answer>
        </question>

        <question id="non-modifying-find-end">
            <text>find_end()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/find_end</link>
            <answer>Finds the last sequence of elements in a certain range.</answer>
        </question>

        <question id="non-modifying-find-first-of">
            <text>find_first_of()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/find_first_of</link>
            <answer>Searches for any one of a set of elements.</answer>
        </question>

        <question id="non-modifying-adjacent_find">
            <text>adjacent_find()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/adjacent_find</link>
            <answer>Finds the first two adjacent items that are equal (or satisfy a given predicate).</answer>
        </question>

        <question id="non-modifying-search">
            <text>search()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/search</link>
            <answer>Searches for a range of elements.</answer>
        </question>

        <question id="non-modifying-search-n">
            <text>search_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/search_n</link>
            <answer>Searches for a number consecutive copies of an element in a range.</answer>
        </question>
    </section>

    <section id="modifying-sequence-operations" answers_as_choices="true" and_reverse="true">
        <title>Modifying Sequence Operations</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Modifying_sequence_operations</link>
        <question id="modifying-copy">
            <text>copy(), copy_if()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/copy</link>
            <answer>Copies a range of elements to a new location.</answer>
        </question>

        <question id="modifying-copy_n">
            <text>copy_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/copy_n</link>
            <answer>Copies a number of elements to a new location.</answer>
        </question>

        <question id="modifying-copy_backward">
            <text>copy_backward()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/copy_backward</link>
            <answer>Copies a range of elements in backwards order.</answer>
        </question>

        <question id="modifying-move">
            <text>copy_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/move</link>
            <answer>Moves a range of elements to a new location.</answer>
        </question>

        <question id="modifying-move_backward">
            <text>copy_backward()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/move_backward</link>
            <answer>Moves a range of elements to a new location in backwards order.</answer>
        </question>

        <question id="modifying-fill">
            <text>fill()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/fill</link>
            <answer>Assigns a range of elements a certain value.</answer>
        </question>

        <question id="modifying-fill_n">
            <text>fill_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/fill</link>
            <answer>Assigns a value to a number of elements.</answer>
        </question>

        <question id="modifying-transform">
            <text>transform()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/transform</link>
            <answer>Applies a function to a range of elements.</answer>
        </question>

        <question id="modifying-generate">
            <text>generate()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/generate</link>
            <answer>Saves the result of a function in a range.</answer>
        </question>

        <question id="modifying-generate_n">
            <text>generate_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/generate_n</link>
            <answer>Saves the result of N applications of a function.</answer>
        </question>

        <question id="modifying-remove">
            <text>remove(), remove_if()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/remove</link>
            <answer>Removes elements satisfying specific criteria.</answer>
        </question>

        <question id="modifying-remove_copy">
            <text>remove_copy(), remove_copy_if()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/remove_copy</link>
            <answer>Copies a range of elements omitting those that satisfy specific criteria.</answer>
        </question>

        <question id="modifying-replace">
            <text>replace(), replace_if()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/replace</link>
            <answer>Replaces all values satisfying specific criteria with another value.</answer>
        </question>

        <question id="modifying-replace_copy">
            <text>replace_copy(), replace_copy_if()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/remove_copy</link>
            <answer>Copies a range, replacing elements satisfying specific criteria with another value.</answer>
        </question>

        <question id="modifying-swap">
            <text>swap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/swap</link>
            <answer>Swaps the values of two objects.</answer>
        </question>

        <question id="modifying-swap_ranges">
            <text>swap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/swap_ranges</link>
            <answer>Swaps two ranges of elements.</answer>
        </question>

        <question id="modifying-iter_swap">
            <text>iter_swap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/iter_swap</link>
            <answer>Swaps the elements pointed to by two iterators.</answer>
        </question>

        <question id="modifying-reverse">
            <text>reverse()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/reverse</link>
            <answer>Reverses the order of elements in a range.</answer>
        </question>

        <question id="modifying-reverse_copy">
            <text>reverse_copy()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/reverse_copy</link>
            <answer>Creates a copy of a range that is reversed.</answer>
        </question>

        <question id="modifying-rotate">
            <text>rotate()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/rotate</link>
            <answer>Rotates the order of elements in a range.</answer>
        </question>

        <question id="modifying-rotate_copy">
            <text>rotate_copy()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/rotate_copy</link>
            <answer>Copies and rotates a range of elements.</answer>
        </question>

        <!-- TODO: C++17 will have random_shuffle(). -->
        <question id="modifying-shuffle">
            <text>shuffle()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/random_shuffle</link>
            <answer>Randomly re-orders elements in a range.</answer>
        </question>

        <question id="modifying-sample">
            <text>sample()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/sample</link>
            <answer>Selects n random elements from a sequence.</answer>
        </question>

        <question id="modifying-unique">
            <text>unique()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/unique</link>
            <answer>Removes consecutive duplicate elements in a range.</answer>
        </question>

        <question id="modifying-unique_copy">
            <text>unique_copy()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/unique_copy</link>
            <answer>Creates a copy of some range of elements that contains no consecutive duplicates.</answer>
        </question>
    </section>

    <section id="partitioning" answers_as_choices="true" and_reverse="true">
        <title>Partitioning Operations</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Partitioning_operations</link>
        <question id="partitioning-is_partitioned">
            <text>is_partitioned()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/is_partitioned</link>
            <answer>Determines if the range is partitioned by the given predicate.</answer>
        </question>

        <question id="partitioning-partition">
            <text>partition()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/partition</link>
            <answer>Divides a range of elements into two groups.</answer>
        </question>

        <question id="partitioning-partition_copy">
            <text>partition_copy()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/partition_copy</link>
            <answer>Copies a range, dividing the elements into two groups.</answer>
        </question>

        <question id="partitioning-stable_partition">
            <text>stable_partition()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/stable_partition</link>
            <answer>Divides elements into two groups while preserving their relative order.</answer>
        </question>

        <question id="partitioning-partition_point">
            <text>partition_point()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/stable_partition</link>
            <answer>Locates the partition point of a partitioned range.</answer>
        </question>
    </section>

    <section id="sort" answers_as_choices="true" and_reverse="true">
        <title>Sorting Operations</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Sorting_operations</link>
        <question id="sort-is_sorted">
            <text>is_sorted()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/is_sorted</link>
            <answer>Checks whether a range is sorted into ascending order.</answer>
        </question>

        <question id="sort-is_sorted_until">
            <text>is_sorted_until()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/is_sorted_until</link>
            <answer>Finds the largest sorted subrange.</answer>
        </question>

        <question id="sort-sort">
            <text>sort()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/sort</link>
            <answer>Sorts a range into ascending order.</answer>
        </question>

        <question id="sort-partial_sort">
            <text>partial_sort()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/partial_sort</link>
            <answer>Sorts the first N elements of a range.</answer>
        </question>

        <question id="sort-partial_sort_copy">
            <text>partial_sort_copy()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/partial_sort_copy</link>
            <answer>Copies and partially sorts a range of elements.</answer>
        </question>

        <question id="sort-partial_stable_sort">
            <text>stable_sort()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/stable_sort</link>
            <answer>Sorts a range of elements while preserving order between equal elements.</answer>
        </question>

        <question id="sort-nth_element">
            <text>nth_element()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/nth_element</link>
            <answer>Partially sorts the given range making sure that it is partitioned by the given element.</answer>
        </question>
    </section>

    <section id="binary-search" answers_as_choices="true" and_reverse="true">
        <title>Binary Search Operations (on sorted ranges)</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Binary_search_operations_.28on_sorted_ranges.29</link>
        <question id="binary-search-lower_bound">
            <text>lower_bound()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/lower_bound</link>
            <answer>Returns an iterator to the first element not less than the given value.</answer>
        </question>

        <question id="binary-search-upper_bound">
            <text>upper_bound()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/upper_bound</link>
            <answer>Returns an iterator to the first element greater than a certain value.</answer>
        </question>

        <question id="binary-search-binary_search">
            <text>binary_search()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/binary_search</link>
            <answer>Determines if an element exists in a certain range.</answer>
        </question>

        <question id="binary-search-equal_range">
            <text>equal_range()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/equal_range</link>
            <answer>Returns a range of elements matching a specific key.</answer>
        </question>
    </section>

    <section id="set-operations" answers_as_choices="true" and_reverse="true">
        <title>Set operations (on sorted ranges)</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Set_operations_.28on_sorted_ranges.29</link>
        <question id="set-operations-merge">
            <text>merge()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/merge</link>
            <answer>Merges two sorted ranges.</answer>
        </question>

        <question id="set-operations-inplace_merge">
            <text>inplace_merge()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/inplace_merge</link>
            <answer>merges two ordered ranges in-place.</answer>
        </question>

        <question id="set-operations-includes">
            <text>includes()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/includes</link>
            <answer>Returns true if one set is a subset of another.</answer>
        </question>

        <question id="set-operations-set_difference">
            <text>set_difference()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/set_difference</link>
            <answer>Computes the difference between two sets.</answer>
        </question>

        <question id="set-operations-set_intersection">
            <text>set_intersection()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/set_intersection</link>
            <answer>Computes the intersection of two sets.</answer>
        </question>

        <question id="set-operations-set_symmetric_difference">
            <text>set_symmetric_difference()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</link>
            <answer>Computes the symmetric difference between two sets.</answer>
        </question>

        <question id="set-operations-set_union">
            <text>set_union()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/set_union</link>
            <answer>Computes the union of two sets.</answer>
        </question>
    </section>

    <section id="heap-operations" answers_as_choices="true" and_reverse="true">
        <title>Heap Operations</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Heap_operations</link>
        <question id="heap-operations-is_heap">
            <text>is_heap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/is_heap</link>
            <answer>Checks if the given range is a max heap.</answer>
        </question>

        <question id="heap-operations-is_heap_until">
            <text>is_heap_until()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/is_heap_until</link>
            <answer>Finds the largest subrange that is a max heap.</answer>
        </question>

        <question id="heap-operations-make_heap">
            <text>make_heap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/make_heap</link>
            <answer>Creates a max heap out of a range of elements.</answer>
        </question>

        <question id="heap-operations-push_heap">
            <text>push_heap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/push_heap</link>
            <answer>Adds an element to a max heap.</answer>
        </question>

        <question id="heap-operations-pop_heap">
            <text>pop_heap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/pop_heap</link>
            <answer>Removes the largest element from a max heap.</answer>
        </question>

        <question id="heap-operations-sort_heap">
            <text>sort_heap()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/sort_heap</link>
            <answer>Turns a max heap into a range of elements sorted in ascending order.</answer>
        </question>
    </section>

    <section id="min-max-operations" answers_as_choices="true" and_reverse="true">
        <title>Minimum/maximum operations</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Minimum.2Fmaximum_operations</link>
        <question id="min-max-operations-max">
            <text>max()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/max</link>
            <answer>Returns the greater of the given values.</answer>
        </question>

        <question id="min-max-operations-max_element">
            <text>max_element()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/max_element</link>
            <answer>Returns the largest element in a range.</answer>
        </question>

        <question id="min-max-operations-min">
            <text>min()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/min</link>
            <answer>Returns the smaller of the given values.</answer>
        </question>

        <question id="min-max-operations-min_element">
            <text>min_element()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/min_element</link>
            <answer>Returns the smallest element in a range.</answer>
        </question>

        <question id="min-max-operations-minmax">
            <text>minmax()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/minmax</link>
            <answer>Returns the smaller and larger of two elements.</answer>
        </question>

        <question id="min-max-operations-minmax_element">
            <text>minmax_element()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/minmax_element</link>
            <answer>Returns the smallest and the largest elements in a range.</answer>
        </question>

        <question id="min-max-operations-clamp">
            <text>clamp()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/clamp</link>
            <answer>Clamps a value between a pair of boundary values.</answer>
        </question>

        <question id="min-max-operations-lexicographical_compare">
            <text>lexicographical_compare()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/lexicographical_compare</link>
            <answer>Returns true if one range is lexicographically less than another.</answer>
        </question>

        <question id="min-max-operations-is_permutation">
            <text>is_permutation()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/is_permutation</link>
            <answer>Determines if a sequence is a permutation of another sequence.</answer>
        </question>

        <question id="min-max-operations-next_permutation">
            <text>next_permutation()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/next_permutation</link>
            <answer>Generates the next greater lexicographic permutation of a range of elements.</answer>
        </question>

        <question id="min-max-operations-prev_permutation">
            <text>prev_permutation()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/prev_permutation</link>
            <answer>Generates the next smaller lexicographic permutation of a range of elements.</answer>
        </question>
    </section>

    <section id="numeric-operations" answers_as_choices="true" and_reverse="true">
        <title>Numeric operations</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Numeric_operations</link>
        <question id="numeric-operations-iota">
            <text>iota()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/iota</link>
            <answer>Fills a range with successive increments of the starting value.</answer>
        </question>

        <question id="numeric-operations-accumulate">
            <text>accumulate()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/accumulate</link>
            <answer>Sums up a range of elements.</answer>
        </question>

        <question id="numeric-operations-inner_product">
            <text>inner_product()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/inner_product</link>
            <answer>Computes the inner product of two ranges of elements.</answer>
        </question>

        <question id="numeric-operations-adjacent_difference">
            <text>adjacent_difference()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/adjacent_difference</link>
            <answer>Computes the differences between adjacent elements in a range.</answer>
        </question>

        <question id="numeric-operations-partial_sum">
            <text>partial_sum()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/partial_sum</link>
            <answer>Computes the partial sum of a range of elements.</answer>
        </question>

        <question id="numeric-operations-reduce">
            <text>reduce()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/reduce</link>
            <answer>Similar to std::accumulate(), except out of order.</answer>
        </question>

        <!-- TODO: C++17 should have several more, such as exclusive_scan. -->
    </section>

    <section id="operations-on-uninitialized-memory" answers_as_choices="true" and_reverse="true">
        <title>Operations on uninitialized memory</title>
        <link>http://en.cppreference.com/w/cpp/algorithm#Operations_on_uninitialized_memory</link>
        <question id="operations-on-uninitialized-memory-uninitialized_copy">
            <text>uninitialized_copy()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/uninitialized_copy</link>
            <answer>Copies a range of objects to an uninitialized area of memory.</answer>
        </question>

        <question id="operations-on-uninitialized-memory-uninitialized_copy_n">
            <text>uninitialized_copy_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/uninitialized_copy_n</link>
            <answer>Copies a number of objects to an uninitialized area of memory.</answer>
        </question>

        <question id="operations-on-uninitialized-memory-uninitialized_fill">
            <text>uninitialized_fill()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/uninitialized_fill</link>
            <answer>Copies an object to an uninitialized area of memory, defined by a range.</answer>
        </question>

        <question id="operations-on-uninitialized-memory-uninitialized_fill_n">
            <text>uninitialized_fill_n()</text>
            <link>http://en.cppreference.com/w/cpp/algorithm/uninitialized_fill</link>
            <answer>Copies an object to an uninitialized area of memory, defined by a start and a count.</answer>
        </question>
    </section>
</quiz>