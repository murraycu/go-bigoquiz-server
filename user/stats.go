package user

import (
	"google.golang.org/appengine/datastore"
	"quiz"
)

// Statistics for the user, either per quiz (SectionId is then empty), or per section in a quiz.
type Stats struct {
	// The autogenerated ID.
	// With some versions of appengine's datastore,
	// we should be able to populate this from datastore.Get() calls automatically,
	// with datastore.Put() calls ignoring it:
	//   https://godoc.org/cloud.google.com/go/datastore#hdr-Key_Field
	// Key *datastore.Key `json:"-" datastore:"__key__"`
	// But that does not work with the appengine datastore we are using:
	//   https://github.com/GoogleCloudPlatform/google-cloud-go/issues/453#issuecomment-328797122
	// So we instead set it manually after each Get() and after each Put().
	Key *datastore.Key `json:"-" datastore:"-"`

	UserId *datastore.Key `json:"-" datastore:"userId"`

	QuizId    string `json:"quizId,omitEmpty" datastore:"quizId"`
	SectionId string `json:"sectionId,omitEmpty" datastore:"sectionId"`

	Answered int `json:"answered" datastore:"answered"`
	Correct  int `json:"correct" datastore:"correct"`

	CountQuestionsAnsweredOnce int `json:"countQuestionsAnsweredOnce" datastore:"countQuestionsAnsweredOnce"`
	CountQuestionsCorrectOnce  int `json:"countQuestionsCorrectOnce" datastore:"countQuestionsCorrectOnce"`

	// TODO: Avoid putting this in the JSON?

	// Note: Go's datastore API doesn't let us use a map,
	// though Java's does let us use a Map.
	// (either QuestionHistories map[string]*QuestionHistory or QuestionHistories map[string]QuestionHistory )
	// Also, Go's datastore API (at least the appengine fork of it)
	// doesn't let us use []*QuestionHistory - only []QuestionHistory.
	QuestionHistories []QuestionHistory `json:"questionHistories,omitEmpty" datastore:"questionHistories"`

	// These are from the quiz, for convenience
	// so they don't need to be in the database.
	// TODO: Make sure they are set for per-section stats.
	CountQuestions int    `json:"countQuestions" datastore:"-"`
	QuizTitle      string `json:"quizTitle,omitEmpty" datastore:"-"`
	SectionTitle   string `json:"sectionTitle,omitEmpty" datastore:"-"`
}

func (self *Stats) GetQuestionCountAnsweredWrong(questionId string) int {
	qh, ok := self.getQuestionHistoryForQuestionId(questionId)
	if !ok {
		return 0
	}

	return qh.CountAnsweredWrong
}

func (self *Stats) GetQuestionWasAnswered(questionId string) bool {
	_, found := self.getQuestionHistoryForQuestionId(questionId)
	return found
}

/** Add the values from userStat to this instance,
* returning a combined UserStats,
* ignoring the question histories,
* without changing this instance.
 */
func (self *Stats) CreateCombinedUserStatsWithoutQuestionHistories(stats *Stats) *Stats {
	if stats == nil {
		return self
	}

	var result Stats
	result.UserId = self.UserId
	result.QuizId = self.QuizId

	result.Answered = self.Answered + stats.Answered
	result.Correct = self.Correct + stats.Correct

	result.CountQuestionsAnsweredOnce = self.CountQuestionsAnsweredOnce + stats.CountQuestionsAnsweredOnce
	result.CountQuestionsCorrectOnce = self.CountQuestionsCorrectOnce + stats.CountQuestionsCorrectOnce

	return &result
}

func (self *Stats) IncrementAnswered() {
	self.Answered += 1
}

func (self *Stats) IncrementCorrect() {
	self.Correct += 1
}

func (self *Stats) getQuestionHistoryForQuestionId(questionId string) (*QuestionHistory, bool) {
	if self.QuestionHistories == nil {
		return nil, false
	}

	// TODO: Performance.
	// We would ideally use a map here,
	// but Go's datastore library does not allow that as an entity field type.
	for i := range self.QuestionHistories {
		qh := &self.QuestionHistories[i]
		if qh.QuestionId == questionId {
			return qh, true
		}
	}

	return nil, false
}

func (self *Stats) UpdateProblemQuestion(question *quiz.Question, answerIsCorrect bool) {
	questionId := question.Id
	if len(questionId) == 0 {
		// Log.error("updateProblemQuestion(): questionId is empty.");
		return
	}

	firstTimeAsked := false
	firstTimeCorrect := false

	questionHistory, exists := self.getQuestionHistoryForQuestionId(questionId)

	//Add a new one, if necessary:
	if !exists {
		firstTimeAsked = true
		if answerIsCorrect {
			firstTimeCorrect = true
		}

		questionHistory = new(QuestionHistory)
		questionHistory.QuestionId = question.Id
	} else if answerIsCorrect && !questionHistory.AnsweredCorrectlyOnce {
		firstTimeCorrect = true
	}

	//Increase the wrong-answer count:
	questionHistory.AdjustCount(answerIsCorrect)

	if firstTimeAsked {
		self.CountQuestionsAnsweredOnce++
	}

	if firstTimeCorrect {
		self.CountQuestionsCorrectOnce++
	}

	if !exists {
		self.QuestionHistories = append(self.QuestionHistories, *questionHistory)
	}
	//TODO? cacheIsInvalid = true;
}

func (self *QuestionHistory) AdjustCount(result bool) {
	if result {
		self.AnsweredCorrectlyOnce = true
	}

	if result {
		self.CountAnsweredWrong -= 1
	} else {
		self.CountAnsweredWrong += 1
	}
}
